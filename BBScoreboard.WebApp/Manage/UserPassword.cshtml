@using BBScoreboard
@{
    if (!AppHelper.CheckLogin(this, true)) { return; }


    Page.Title = "User Password";
    Layout = "~/_SiteLayout.cshtml";

    PageData["SubTitle"] = "Manage";


    var db = new BBScoreboardEntities();
    var query = new WebQuery(this);

    var userId = query.GetId("User");
    if (userId == -1)
    {
        query.Redirect("~/Manage/Users");
        return;
    }


    Validation.RequireField("currentPassword", "The current password field is required.");
    Validation.Add("currentPassword",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "Current password must be at least 6 characters"));
    Validation.RequireField("newPassword", "The new password field is required.");
    Validation.Add("confirmPassword",
        Validator.Required("The confirm new password field is required."),
        Validator.EqualsTo("newPassword", "The new password and confirmation password do not match."));
    Validation.Add("newPassword",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "New password must be at least 6 characters"));

    var accessTypes = Manage.AccessTypes;
    var item = db.UserProfiles.Find(userId);

    if (IsPost && Validation.IsValid() && ModelState.IsValid)
    {
        AntiForgery.Validate();

        var currentPassword = Request.Form["currentPassword"];
        var newPassword = Request.Form["newPassword"];
        var confirmPassword = Request.Form["confirmPassword"];

        if (WebSecurity.ChangePassword(item.Email, currentPassword, newPassword))
        {
            query.Remove("User");
            query.Redirect("~/Manage/Users");
            return;
        }
        else
        {
            ModelState.AddFormError("An error occurred when attempting to change the password. Please contact the administrator.");
        }

        // User already exists
        //ModelState.AddFormError("Name is already in use.");
    }
}

<div class="row">
    <div class="col-sm-4">
        <form class="form-horizontal" method="post">
            @AntiForgery.GetHtml()
            @Html.ValidationSummary("Password change was unsuccessful. Please correct the errors and try again.", excludeFieldErrors: true, htmlAttributes: null)

            <div class="form-group">
                <label class="control-label" for="currentPassword">Current Password</label>
                <div class="controls">
                    <input type="password" name="currentPassword" class="col-md-3 form-control" value="" placeholder="Current Password" @Validation.For("currentPassword")>
                    @Html.ValidationMessage("currentPassword")
                </div>
            </div>
            <div class="form-group">
                <label class="control-label" for="newPassword">New Password</label>
                <div class="controls">
                    <input type="password" name="newPassword" class="col-md-3 form-control" value="" placeholder="New Password" @Validation.For("newPassword")>
                    @Html.ValidationMessage("newPassword")
                </div>
            </div>
            <div class="form-group">
                <label class="control-label" for="confirmPassword">Confirm Password</label>
                <div class="controls">
                    <input type="password" name="confirmPassword" class="col-md-3 form-control" value="" placeholder="Confirm Password" @Validation.For("confirmPassword")>
                    @Html.ValidationMessage("confirmPassword")
                </div>
            </div>

            <div class="form-group">
                <div class="controls">
                    <button type="submit" class="btn btn-primary">Update</button>
                    <a href="~/Manage/Users" class="btn btn-default">Cancel</a>
                </div>
            </div>
        </form>
    </div>
</div>